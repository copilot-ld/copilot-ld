AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS ALB and Fargate services for Copilot-LD platform"

Parameters:
  EnvironmentName:
    Type: String
    Default: copilot-ld-demo
    Description: Environment name for resource naming

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC for deployment

  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: Private subnets for services (minimum two)

  ServiceSecurityGroupId:
    Type: String
    Description: Security group ID for services

  ServiceDiscoveryNamespaceId:
    Type: String
    Description: Service discovery namespace ID

  ContainerTag:
    Type: String
    Default: latest
    Description: Container image tag

  GitHubTokenArn:
    Type: String
    Description: ARN of the GitHub token secret in AWS Secrets Manager

  ServiceSecretArn:
    Type: String
    Description: ARN of the service authentication secret in AWS Secrets Manager

  BucketName:
    Type: String
    Description: S3 bucket name for all data storage

  BucketRoleArn:
    Type: String
    Description: IAM role ARN for data access services

  SecretsRoleArn:
    Type: String
    Description: IAM role ARN for secrets access services

Resources:
  # ==========================================
  # ECS INFRASTRUCTURE
  # ==========================================

  # ECS cluster for hosting Copilot-LD services
  ECSCluster:
    Type: AWS::ECS::Cluster

  # CloudWatch log groups for service logging
  AgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  MemoryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  LLMLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  VectorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  GraphLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  ToolLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  # ==========================================
  # TASK DEFINITIONS
  # ==========================================

  # ECS task definitions for backend service containers
  AgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: agent
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/agent:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: DEBUG
              Value: "*"
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AgentLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: agent

  MemoryTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: memory
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/memory:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: DEBUG
              Value: "*"
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MemoryLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: memory

  LLMTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: llm
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/llm:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: DEBUG
              Value: "*"
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LLMLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: llm

  VectorTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: vector
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/vector:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: DEBUG
              Value: "*"
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref VectorLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: vector

  GraphTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: graph
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/graph:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: DEBUG
              Value: "*"
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref GraphLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: graph

  ToolTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: tool
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/tool:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: DEBUG
              Value: "*"
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ToolLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: tool

  # ==========================================
  # SERVICE DISCOVERY
  # ==========================================

  # Service discovery services for backend services (using passed namespace)
  AgentServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: agent
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespaceId

  MemoryServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: memory
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespaceId

  LLMServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: llm
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespaceId

  VectorServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: vector
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespaceId

  GraphServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: graph
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespaceId

  ToolServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: tool
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespaceId

  # ==========================================
  # ECS SERVICES
  # ==========================================

  # ECS services for running backend containerized applications
  AgentService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AgentTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroupId
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt AgentServiceDiscovery.Arn

  MemoryService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref MemoryTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroupId
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt MemoryServiceDiscovery.Arn

  LLMService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref LLMTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroupId
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt LLMServiceDiscovery.Arn

  VectorService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref VectorTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroupId
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt VectorServiceDiscovery.Arn

  GraphService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref GraphTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroupId
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt GraphServiceDiscovery.Arn

  ToolService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ToolTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroupId
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt ToolServiceDiscovery.Arn

Outputs:
  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster

  ECSClusterArn:
    Description: ARN of the ECS cluster
    Value: !GetAtt ECSCluster.Arn

  AgentServiceArn:
    Description: ARN of the agent service
    Value: !Ref AgentService

  MemoryServiceArn:
    Description: ARN of the memory service
    Value: !Ref MemoryService

  LLMServiceArn:
    Description: ARN of the LLM service
    Value: !Ref LLMService

  VectorServiceArn:
    Description: ARN of the vector service
    Value: !Ref VectorService

  GraphServiceArn:
    Description: ARN of the graph service
    Value: !Ref GraphService

  ToolServiceArn:
    Description: ARN of the tool service
    Value: !Ref ToolService
