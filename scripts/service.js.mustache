/* eslint-env node */
import { Service } from "@copilot-ld/libservice";
// Generated types import (consolidated into generated/ directory)
import { {{namespaceName}} } from "../../types/types.js";

/**
 * Base implementation for {{serviceName}} gRPC service with typed method stubs.
 * Extends the `Service` class for shared gRPC server functionality.
 */
export class {{className}} extends Service {
  /**
   * Start the gRPC server with service-specific handlers.
   * @returns {Promise<number>} Port number the server is listening on.
   */
  async start() {
    const proto = await this.loadProto("{{packageName}}.proto");
    const serviceDefinition = proto.{{serviceName}}.service;

    const handlers = {};
{{#methods}}
  handlers.{{name}} = this.handle{{name}};
{{/methods}}

    return super.start(serviceDefinition, handlers);
  }

{{#methods}}
  /**
   * gRPC handler for `{{name}}`: restores a typed request and delegates to the implementation.
   * @param {object} call - gRPC call object.
   * @returns {Promise<{{namespaceName}}.{{responseType}}>} Typed response message.
   */
  async handle{{name}}(call) {
    const {{paramName}} = {{requestTypeExpr}}.fromObject(call.request);
    return this.{{name}}({{paramName}});
  }

{{/methods}}
{{#methods}}
  /**
   * Implement the `{{name}}` RPC.
   * @param { {{namespaceName}}.{{requestType}} } _{{paramName}} - Typed request message.
   * @returns {Promise<{{namespaceName}}.{{responseType}}>} Typed response message.
   */
  async {{name}}(_{{paramName}}) {
    throw new Error("Not implemented");
  }

{{/methods}}
}
