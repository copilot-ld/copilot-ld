AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS ALB and Fargate services for Copilot-LD platform"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC for deployment

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets for ALB (minimum two)

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets for services (minimum two)

  ContainerTag:
    Type: String
    Default: latest
    Description: Container image tag

  GitHubTokenArn:
    Type: String
    Description: ARN of the GitHub token secret in AWS Secrets Manager

  ServiceSecretArn:
    Type: String
    Description: ARN of the service authentication secret in AWS Secrets Manager

  BucketName:
    Type: String
    Description: S3 bucket name for all data storage

  BucketRoleArn:
    Type: String
    Description: IAM role ARN for data access services

  SecretsRoleArn:
    Type: String
    Description: IAM role ARN for secrets access services

Resources:
  # ==========================================
  # NETWORKING & SECURITY
  # ==========================================

  # Security group allowing HTTP traffic and internal service communication
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: copilot-ld-services
      GroupDescription: Security group for all Copilot-LD services
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Add self-referencing ingress rules separately to avoid circular dependency
  ServiceSecurityGroupIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ServiceSecurityGroup
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3005
      SourceSecurityGroupId: !Ref ServiceSecurityGroup

  ServiceSecurityGroupIngressGRPC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ServiceSecurityGroup
      IpProtocol: tcp
      FromPort: 50051
      ToPort: 50055
      SourceSecurityGroupId: !Ref ServiceSecurityGroup

  # Application Load Balancer for web traffic distribution
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: copilot-ld-alb
      Type: application
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref ServiceSecurityGroup

  # Target group for web service load balancer routing
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: copilot-ld-web
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip

  # HTTP listener with default 404 response for unmatched paths
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: text/plain
            MessageBody: "Not found"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Listener rule for web service
  WebListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/web/*"
      ListenerArn: !Ref ALBListener
      Priority: 100

  # ==========================================
  # ECS INFRASTRUCTURE
  # ==========================================

  # ECS cluster for hosting Copilot-LD services
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: copilot-ld

  # Service discovery namespace for internal communication
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: copilot-ld.local
      Vpc: !Ref VpcId

  # CloudWatch log groups for service logging
  WebLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/copilot-ld-web

  AgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/copilot-ld-agent

  MemoryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/copilot-ld-memory

  LLMLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/copilot-ld-llm

  VectorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/copilot-ld-vector

  ToolLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/copilot-ld-tool

  # ==========================================
  # TASK DEFINITIONS
  # ==========================================

  # ECS task definitions for service containers
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: copilot-ld-web
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: web
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/web:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: S3_BUCKET_ROLE_ARN
              Value: !Ref BucketRoleArn
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: web

  AgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: copilot-ld-agent
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: agent
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/agent:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: S3_BUCKET_ROLE_ARN
              Value: !Ref BucketRoleArn
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AgentLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: agent

  MemoryTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: copilot-ld-memory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: memory
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/memory:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: S3_BUCKET_ROLE_ARN
              Value: !Ref BucketRoleArn
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MemoryLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: memory

  LLMTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: copilot-ld-llm
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: llm
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/llm:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: S3_BUCKET_ROLE_ARN
              Value: !Ref BucketRoleArn
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LLMLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: llm

  VectorTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: copilot-ld-vector
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: vector
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/vector:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: S3_BUCKET_ROLE_ARN
              Value: !Ref BucketRoleArn
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref VectorLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: vector

  ToolTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: copilot-ld-tool
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref SecretsRoleArn
      TaskRoleArn: !Ref BucketRoleArn
      ContainerDefinitions:
        - Name: tool
          Image: !Sub "ghcr.io/copilot-ld/copilot-ld/tool:${ContainerTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: STORAGE_TYPE
              Value: s3
            - Name: S3_BUCKET_NAME
              Value: !Ref BucketName
            - Name: S3_BUCKET_ROLE_ARN
              Value: !Ref BucketRoleArn
          Secrets:
            - Name: GITHUB_TOKEN
              ValueFrom: !Sub "${GitHubTokenArn}:GITHUB_TOKEN::"
            - Name: SERVICE_SECRET
              ValueFrom: !Sub "${ServiceSecretArn}:SERVICE_SECRET::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ToolLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: tool

  # ==========================================
  # SERVICE DISCOVERY
  # ==========================================

  # Service discovery services for backend services
  AgentServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: agent
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespace

  MemoryServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: memory
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespace

  LLMServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: llm
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespace

  VectorServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: vector
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespace

  ToolServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: tool
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 300
      NamespaceId: !Ref ServiceDiscoveryNamespace

  # ==========================================
  # ECS SERVICES
  # ==========================================

  # ECS services for running containerized applications
  WebService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: copilot-ld-web
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WebTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref PrivateSubnetIds
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 3000
          TargetGroupArn: !Ref WebTargetGroup

  AgentService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: copilot-ld-agent
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AgentTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt AgentServiceDiscovery.Arn

  MemoryService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: copilot-ld-memory
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref MemoryTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt MemoryServiceDiscovery.Arn

  LLMService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: copilot-ld-llm
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref LLMTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt LLMServiceDiscovery.Arn

  VectorService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: copilot-ld-vector
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref VectorTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt VectorServiceDiscovery.Arn

  ToolService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: copilot-ld-tool
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ToolTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref PrivateSubnetIds
      ServiceRegistries:
        - RegistryArn: !GetAtt ToolServiceDiscovery.Arn

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  WebServiceURL:
    Description: URL for the web service with /web prefix
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}/web"

  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster

  WebServiceArn:
    Description: ARN of the web service
    Value: !Ref WebService

  AgentServiceArn:
    Description: ARN of the agent service
    Value: !Ref AgentService

  MemoryServiceArn:
    Description: ARN of the memory service
    Value: !Ref MemoryService

  LLMServiceArn:
    Description: ARN of the LLM service
    Value: !Ref LLMService

  VectorServiceArn:
    Description: ARN of the vector service
    Value: !Ref VectorService

  ToolServiceArn:
    Description: ARN of the tool service
    Value: !Ref ToolService
