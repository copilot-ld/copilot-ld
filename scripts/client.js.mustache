/* eslint-env node */
import { Client } from "@copilot-ld/librpc";
import { {{#importNamespaces}}{{name}}{{^isLast}}, {{/isLast}}{{/importNamespaces}} } from "@copilot-ld/libtype";

/**
 * Typed client for the {{serviceName}} gRPC service with automatic type conversion.
 * Extends the `Client` class for shared gRPC client functionality.
 */
export class {{className}} extends Client {
{{#methods}}
  /**
   * Call the `{{name}}` RPC with request/response type conversion.
   * @param { {{requestTypeNamespace}}.{{requestType}} } {{paramName}} - Typed request message.
   * @returns { Promise<{{responseTypeNamespace}}.{{responseType}}> } Typed response message.
   */
  async {{name}}({{paramName}}) {
    if (!({{paramName}} instanceof {{requestTypeNamespace}}.{{requestType}})) {
      throw new TypeError(`{{name}}: Expected parameter to be instanceof {{requestTypeNamespace}}.{{requestType}}`);
    }
    const request = {{requestTypeNamespace}}.{{requestType}}.toObject({{paramName}});
    const response = await this.callMethod("{{name}}", request);
    return {{responseTypeNamespace}}.{{responseType}}.fromObject(response);
  }

{{/methods}}
}
