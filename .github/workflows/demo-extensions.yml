name: Demo Deployment of Extensions

on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: "Environment name prefix for resources"
        required: true
        default: "demo"
        type: string
      vpc_id:
        description: "VPC ID for deployment"
        required: true
        type: string
      private_subnet_ids:
        description:
          "Private subnet IDs for web extension (comma-separated list, minimum
          two)"
        required: true
        type: string
      network_stack_name:
        description: "Name of the network CloudFormation stack"
        required: true
        default: "demo-cld-network-stack-cf"
        type: string
      secrets_stack_name:
        description: "Name of the secrets CloudFormation stack"
        required: true
        default: "demo-cld-secrets-stack-cf"
        type: string
      data_stack_name:
        description: "Name of the data CloudFormation stack"
        required: true
        default: "demo-cld-data-stack-cf"
        type: string
      container_tag:
        description: "Container image tag to deploy"
        required: false
        default: "latest"
        type: string
      aws_region:
        description: "AWS region for deployment"
        required: true
        default: "us-east-1"
        type: string

jobs:
  deploy-extensions:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEMO_AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}

      - name: Get stack outputs
        id: stack-outputs
        run: |
          # Get outputs from network stack
          SERVICE_SECURITY_GROUP_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.network_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceSecurityGroupId`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          ALB_LISTENER_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.network_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ALBListenerArn`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          SERVICE_DISCOVERY_NAMESPACE_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.network_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceDiscoveryNamespaceId`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          ALB_DNS_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.network_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApplicationLoadBalancerDNSName`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          # Get outputs from secrets stack
          GITHUB_TOKEN_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.secrets_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`GitHubTokenArn`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          SERVICE_SECRET_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.secrets_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceSecretArn`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          SECRETS_ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.secrets_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`SecretsRoleArn`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          # Get outputs from data stack
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.data_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          BUCKET_ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.data_stack_name }} \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketRoleArn`].OutputValue' \
            --output text \
            --region ${{ inputs.aws_region }})

          echo "service_security_group_id=$SERVICE_SECURITY_GROUP_ID" >> $GITHUB_OUTPUT
          echo "alb_listener_arn=$ALB_LISTENER_ARN" >> $GITHUB_OUTPUT
          echo "service_discovery_namespace_id=$SERVICE_DISCOVERY_NAMESPACE_ID" >> $GITHUB_OUTPUT
          echo "alb_dns_name=$ALB_DNS_NAME" >> $GITHUB_OUTPUT
          echo "github_token_arn=$GITHUB_TOKEN_ARN" >> $GITHUB_OUTPUT
          echo "service_secret_arn=$SERVICE_SECRET_ARN" >> $GITHUB_OUTPUT
          echo "secrets_role_arn=$SECRETS_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "bucket_role_arn=$BUCKET_ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Deploy extensions
        id: deploy
        run: |
          STACK_NAME="${{ inputs.environment_name }}-cld-extensions-stack-cf"
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/extensions.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              EnvironmentName="${{ inputs.environment_name }}" \
              VpcId="${{ inputs.vpc_id }}" \
              PrivateSubnetIds="${{ inputs.private_subnet_ids }}" \
              ServiceSecurityGroupId="${{ steps.stack-outputs.outputs.service_security_group_id }}" \
              ALBListenerArn="${{ steps.stack-outputs.outputs.alb_listener_arn }}" \
              ServiceDiscoveryNamespaceId="${{ steps.stack-outputs.outputs.service_discovery_namespace_id }}" \
              ContainerTag="${{ inputs.container_tag }}" \
              GitHubTokenArn="${{ steps.stack-outputs.outputs.github_token_arn }}" \
              ServiceSecretArn="${{ steps.stack-outputs.outputs.service_secret_arn }}" \
              BucketName="${{ steps.stack-outputs.outputs.bucket_name }}" \
              BucketRoleArn="${{ steps.stack-outputs.outputs.bucket_role_arn }}" \
              SecretsRoleArn="${{ steps.stack-outputs.outputs.secrets_role_arn }}" \
            --capabilities CAPABILITY_IAM \
            --region ${{ inputs.aws_region }}
          echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT

      - name: Display deployment summary
        run: |
          echo "✅ Copilot-LD Demo: Extensions Deployed (Step 5/5)"
          echo ""
          echo "Stack: ${{ steps.deploy.outputs.stack_name }}"
          echo "Region: ${{ inputs.aws_region }}"
          echo ""
          echo "Web Extension URL: http://${{ steps.stack-outputs.outputs.alb_dns_name }}/web"
          echo ""
          echo "✅ Deployment Complete! All services are ready for use."
